version: '3.8'

services:
  # Base de datos PostgreSQL + PostGIS
  db:
    image: postgis/postgis:15-3.3-alpine
    container_name: panel-secretario-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PGDATABASE:-panel_secretario}
      POSTGRES_USER: ${PGUSER:-panel_user}
      POSTGRES_PASSWORD: ${PGPASSWORD:-panel_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_MX.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-panel_user} -d ${PGDATABASE:-panel_secretario}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - panel-network

  # API Backend (Express + Node.js)
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: panel-secretario-api
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 8080
      API_KEY: ${API_KEY}
      PGHOST: db
      PGPORT: 5432
      PGDATABASE: ${PGDATABASE:-panel_secretario}
      PGUSER: ${PGUSER:-panel_user}
      PGPASSWORD: ${PGPASSWORD:-panel_password}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost}
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-20971520}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-5}
    volumes:
      - uploads:/tmp/uploads
      - api_logs:/app/logs
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - panel-network

  # Frontend Web (React + Nginx)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: panel-secretario-web
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - panel-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: panel-secretario-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
      - web
    networks:
      - panel-network

  # Certbot para SSL/TLS (Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: panel-secretario-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - panel-network

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local
  api_logs:
    driver: local

networks:
  panel-network:
    driver: bridge
